FULL CREDIT
===========

QUESTION 1: Why is String[] args changed to a LinkedList in WordSearch.main? (Hint: Examine the WordSearch constructor!)

The String[] args is changed to a LinkedList so that the WordSearch constructor can handle the first individual string and remove it from a Linked List so that it can be separated like [-h] [-v] [#threads] [#puzzles] [puzzleFile] easily.


QUESTION 2: How many puzzles did your machine need to solve with 1 thread to run for between 30 and 45 seconds: 

It took 1000 puzzles for my machine to solve with 1 thread to run for between 30 and 45 seconds.


QUESTION 3: Provide the output of 

    time java WordSearch n 1000 ../puzzle??.txt 
		1000 puzzles with 1 threads
		Thread 0: 0-999

		real	0m35.438s
		user	0m25.997s
		sys	0m8.858s


where n is 1 to 16 and 1000 is the number of puzzles specified in Question 2. NOTE: You can run all of these with a single bash command if you like (again, replace 1000 with your number of puzzles from Question 2):

for i in {1..16} ; do time java WordSearch $i 1000 ../puzzle??.txt ; done

Example Timing:

 for i in {1..16} ; do time java WordSearch $i 1000 ../puzzle??.txt ; done
1000 puzzles with 1 threads
Thread 0: 0-999

real	0m30.935s
user	0m28.670s
sys	0m3.126s

1000 puzzles with 2 threads
Thread 0: 0-499
Thread 1: 500-999

real	0m18.415s
user	0m34.764s
sys	0m1.423s

1000 puzzles with 3 threads
Thread 0: 0-332
Thread 1: 333-665
Thread 2: 666-998

real	0m10.840s
user	0m28.766s
sys	0m1.717s

1000 puzzles with 4 threads
Thread 2: 500-749
Thread 1: 250-499
Thread 0: 0-249
Thread 3: 750-999

real	0m9.682s
user	0m28.655s
sys	0m5.540s
Thread 0: 0-199
Thread 1: 200-399

1000 puzzles with 5 threads
Thread 4: 800-999
Thread 2: 400-599
Thread 3: 600-799

real	0m7.067s
user	0m26.033s
sys	0m4.805s
Thread 2: 332-497
Thread 0: 0-165
Thread 1: 166-331

1000 puzzles with 6 threads
Thread 3: 498-663
Thread 5: 830-995
Thread 4: 664-829

real	0m6.580s
user	0m26.000s
sys	0m5.977s

1000 puzzles with 7 threads
Thread 4: 568-709
Thread 6: 852-993
Thread 2: 284-425
Thread 5: 710-851
Thread 1: 142-283
Thread 3: 426-567
Thread 0: 0-141

real	0m7.242s
user	0m26.974s
sys	0m4.121s

1000 puzzles with 8 threads
Thread 4: 500-624
Thread 2: 250-374
Thread 0: 0-124
Thread 5: 625-749
Thread 7: 875-999
Thread 6: 750-874
Thread 1: 125-249
Thread 3: 375-499

real	0m7.024s
user	0m26.950s
sys	0m4.594s

1000 puzzles with 9 threads
Thread 5: 555-665
Thread 4: 444-554
Thread 1: 111-221
Thread 3: 333-443
Thread 7: 777-887
Thread 8: 888-998
Thread 2: 222-332
Thread 0: 0-110
Thread 6: 666-776

real	0m7.303s
user	0m28.134s
sys	0m4.670s
Thread 0: 0-99
Thread 5: 500-599
Thread 1: 100-199
Thread 2: 200-299
Thread 4: 400-499
Thread 6: 600-699
Thread 3: 300-399
Thread 8: 800-899
Thread 9: 900-999
Thread 7: 700-799

1000 puzzles with 10 threads

real	0m6.411s
user	0m23.788s
sys	0m5.156s
Thread 5: 450-539

1000 puzzles with 11 threads
Thread 7: 630-719
Thread 9: 810-899
Thread 1: 90-179
Thread 4: 360-449
Thread 0: 0-89
Thread 6: 540-629
Thread 8: 720-809
Thread 10: 900-989
Thread 3: 270-359
Thread 2: 180-269

real	0m7.003s
user	0m27.196s
sys	0m5.096s
Thread 0: 0-82
Thread 6: 498-580
Thread 1: 83-165
Thread 4: 332-414
Thread 2: 166-248
Thread 5: 415-497
Thread 8: 664-746
Thread 9: 747-829
Thread 7: 581-663
Thread 10: 830-912

1000 puzzles with 12 threads
Thread 11: 913-995
Thread 3: 249-331

real	0m7.346s
user	0m27.788s
sys	0m6.565s
Thread 5: 380-455
Thread 1: 76-151
Thread 0: 0-75
Thread 10: 760-835
Thread 2: 152-227
Thread 8: 608-683
Thread 9: 684-759
Thread 3: 228-303
Thread 11: 836-911
Thread 12: 912-987
Thread 4: 304-379
Thread 7: 532-607
Thread 6: 456-531

1000 puzzles with 13 threads

real	0m7.659s
user	0m30.232s
sys	0m5.913s
Thread 3: 213-283
Thread 4: 284-354
Thread 6: 426-496
Thread 7: 497-567
Thread 5: 355-425
Thread 1: 71-141
Thread 0: 0-70
Thread 10: 710-780
Thread 11: 781-851
Thread 2: 142-212
Thread 8: 568-638
Thread 9: 639-709
Thread 12: 852-922
Thread 13: 923-993

1000 puzzles with 14 threads

real	0m10.549s
user	0m29.824s
sys	0m7.923s
Thread 4: 264-329
Thread 6: 396-461
Thread 7: 462-527
Thread 9: 594-659
Thread 8: 528-593
Thread 2: 132-197
Thread 10: 660-725
Thread 0: 0-65
Thread 5: 330-395
Thread 11: 726-791
Thread 1: 66-131
Thread 3: 198-263
Thread 12: 792-857
Thread 13: 858-923
Thread 14: 924-989

1000 puzzles with 15 threads

real	0m13.041s
user	0m31.150s
sys	0m9.799s
Thread 6: 372-433
Thread 2: 124-185
Thread 15: 930-991
Thread 7: 434-495
Thread 10: 620-681
Thread 14: 868-929
Thread 8: 496-557
Thread 3: 186-247
Thread 13: 806-867
Thread 4: 248-309

1000 puzzles with 16 threads
Thread 0: 0-61
Thread 1: 62-123
Thread 11: 682-743
Thread 5: 310-371
Thread 9: 558-619
Thread 12: 744-805

real	0m15.002s
user	0m30.327s
sys	0m10.117s


...and so on



YOUR Timing:







QUESTION 3: Does adding more threads continue to speed up the program? Do more threads ever slow down the program even slightly?  Why or why not?

Adding threads can only speed up the program because threads run concurrently, or at the same time, meaning splitting the time complexity into multiple threads significantly reduces the time necessary to process a large number of inputs. The program might slow down if the time complexity was O(1/n), or if the threads are handling a disproportionate amount of load.




QUESTION 4: Does adding more threads increase the "system load" (sys), or is it constant regardless of the number of threads?  Why?


The system load is not fixed to the number of threads, but an increase in threads can lead to an increase in system load to to the overhead associated with thread management.



BONUS
=====

QUESTION 5: Time your thread pool version of WordSearch exactly as you did for the full credit version. Post your timings here.

YOUR Timing:







QUESTION 6: Is a thread pool faster, slower, or roughly equivalent in performance? 







QUESTION 7: Compare your full credit and bonus solution code. Which do you believe is more supportable over a long lifetime of evolving hardware and environments?







EXTREME BONUS
=============

QUESTION 8: Post your final timings here. (The "race" on Antares will determine the actual winner - this just lets me know you're competing!)







